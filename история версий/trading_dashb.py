# -*- coding: utf-8 -*-
"""trading_dashb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TIHPeiNt2GYFxxoYI02fKGjM-IoF08MU
"""

# ! pip install pyserial

# ! pip install --upgrade gspread



# import random
import datetime
import pandas as pd
import gspread
import itertools
import imaplib, serial, struct, time
import re
from email.header import Header, decode_header, make_header
import json
import collections.abc



tickers = [
# "US100",
# "TSLA",
# "FB",
# "MSFT",
# "GOOGL",
# "MSTR",
'BTCUSDT',
# "USDRUB",
]

timeframe_coverter = {}
timeframe_coverter = {
    "60": 60,
    "45":45,
    "30":30,
    "15":15,
    "5":5,
    "1":1

}

timeframes = timeframe_coverter.keys()

timeframes = [str(x) for x in timeframes]

patterns = [
"AF_up",
"AF_dn",
"Cross_up", # это не про лонг-шорт, это про пересечение над или под
"Cross_dn",
"AI_r2_up",
"AI_r2_dn",
"AI_r1_up",
"AI_r1_dn",
"AI_r0_up",
"AI_r0_dn",
]

user = "trading.view.alerts777@gmail.com"
pwd = "kaif666aA"


def create_dashbord():
    return {x: {y: {z: "" for z in patterns} for y in timeframes} for x in tickers}


def create_dashbord_timer():
    return {x: {y: {z: datetime.datetime.now() for z in patterns} for y in timeframes} for x in tickers}


class Mail():
    def __init__(self):
        self.user= user
        self.password= pwd

        self.M = imaplib.IMAP4_SSL('imap.gmail.com', '993')
        self.M.login(self.user, self.password)
        
    def checkMail(self):
        self.M.select()

        self.unRead, self.data = self.M.search(None, '(UNSEEN SUBJECT "alert")')

        if len(self.data[0].split()) > 0:
          self.M.store(self.data[0].decode('utf-8').replace(' ',','),'+FLAGS','\Seen')
          return self.data
        else:
          return ''


def get_signals(dashboard):
  new_data=[]

  a=email.checkMail()

  if str(a)!='':

    if len(a[0].split())>0:

      for i in a[0].split():

        try:
          corpus=re.findall('Оповещение:.*,.*,.{1,10} \"{1}', str(make_header(decode_header(str(email.M.fetch(i,"(envelope)")[1][0])))))[0]
          
          if len(corpus.split(','))>3:

            ticker = corpus.split(',')[1].rstrip().lstrip()
            timeframe = corpus.split(',')[2].rstrip().lstrip()
            pattern = corpus.split(',')[3].replace('"','').rstrip().lstrip()
            new_data.append((ticker,timeframe,pattern))

        except:
          continue

  if len(new_data)>0:

    for ticker,timeframe,pattern in new_data:
      dashboard[ticker][timeframe][pattern] = 1
      dashboard_timer[ticker][timeframe][pattern] = datetime.datetime.now()

  
  return (dashboard,dashboard_timer)


def update_d(d, u):
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = update_d(d.get(k, {}), v)
        else:
            d[k] = v
    return d


# creating tickers sample
dashboard = create_dashbord()
dashboard_timer = create_dashbord_timer()

# reading the email box
email = Mail()

dashboard_df = pd.DataFrame.from_dict(dashboard,orient='index')
dashboard_df = pd.DataFrame.from_dict({(i,j): dashboard_df[i][j] 
                                  for i in dashboard_df.keys() 
                                  for j in dashboard_df[i].keys()},
                              orient='index')

## access to google sheets
google_key = {
  "type": "service_account",
  "project_id": "hazel-freehold-344516",
  "private_key_id": "13e6e210fcaafc3399005ca8cd663d6a4ce4faa0",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDuGEK+E82ZqCRu\n5cMffN74mEyqJc+HvqlyeAynwIJXftyysZWb6gC9CA1gU4Uw1z4lhYUyQCCafo5k\nXmqNVYG/2OL76aUE4qDbGZEwzxgXJcwU2S0Cq7KSpsIS33e6JNFdfA5qr90bz32F\nkn2D6L6sR9+7QARVQxVNaS1bB8FPmxYfllTG6nMjYu752cpkvZd+bZuOlI04qeor\neiZZLcPNbY94dGsWFLHo2eVshkdpE+WZ1taYjVt3s2XXaJl/WF9cfJMNCiCkmJQV\nBdKzrlAYlTn4lp+cR6+sW07MsafMGlUe98SO9b2tu965G3il4Jci6trpAAvmsJzc\nwi4bDJwNAgMBAAECggEALxEttHyessb5+NBD2+gn/dXBpgsWdPu8bIwN2GWmfpxu\nDYcsj6dZIQVD+6xXEpoiR3GXLKFfsJrfFDlT7/+cyCucZ3c/L3GLofRybscpuH24\n09BA5RvDD9mWWPvDI9Geb9AT24RLffFtG2gjlt1+P/lvYYlcsewyfFyT4kBstwsM\nVWFPehxqyavYsrzsQ4IYtZr3iHS4UB8ZRYon5B7ketCet/ZuBfCdWVqmSfjzZ7EO\nmmijLz8/OCRroKDqxNu9P2yP7bW8B4zDojIq8kK8Vh3aNdVlTpOMGBgi0N1pPDyd\niza8dZM7S4PDAyVec54SUuuRccfiKW3J1rI1NTNfkwKBgQD9sPZ2KMPLHnbqt6Sn\n9oaZdRUuAU7k4JCcqLCmshME2ezgSPcOjH+lvEL4ZWulI1I19XvkyNq/BqwXIpyY\nFMtDi6Y7VFHXfSQr4DD4vYpFSJGf4Cpzwalev0GGpssGXamitrxamqh42RWKp9w7\n8gVav3dfY1Py+979VBmxQ3u62wKBgQDwQvZIXVw3uMErde/L+2wSuJ9fkDYZ6F4y\nrJSxCYr9hFdTeltxnS5triVLIdCTdafLdG7AiERPzgQe6nRDdVmQD3DHiaiISBKU\n8ZUX11dgbOoJNjfsWJdJwCHlIsjC7nU++5ijTSiWS8qMPyle7VPmsxsHn4gTeiOD\nU6k7BgKVNwKBgQD4W2k9DfV4AXALoxM4N9lXnE7Kxg8VdF8+bsrZtpV19161x9jN\nznAcsayifq+ecHDIUHYk6Rl1T7Pjxkelfx3rF2j6xjaFDob9yTJIIU6fO0cNTChj\nQKFuFzCwANPbfJBYsiq9TJFIFcXIA0NREEN7rtvPb288/qU0PkQUzOrxZwKBgQCV\nBWOOpOGS6jReSYtPoQV6Yyru8hqsXRU4JxUe7cVY02H6tBTN1mk6vF4DSNj+7WYC\n6pfbMWn1ednSdydfxASmNv2Dth1jUhi8a09Hd1iJxWQwDIIJRTWpF9OuNLIDPjZY\nt2MIPs5i0mWyMWbuqxN0LzkftFKJiiNGzHhV1Ld7ZwKBgQCyy7Ag7Ws58U1QTkD2\nkjmnNNU1Qm9Tum0kiUFtk+KJ3l6lCe4ulDWWigTuX+MMAogQDB6rKx4TDPDgidrZ\n4i2uVGbxdc35oKWJa9+vY8x3lCvDEnqzUDt8+P9vkegDWUJhYFhUxSrzIySxL9hc\n+dUX4hMSFeQpJSyGx5jhfwssmg==\n-----END PRIVATE KEY-----\n",
  "client_email": "trader-viewer@hazel-freehold-344516.iam.gserviceaccount.com",
  "client_id": "115495437317317039318",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/trader-viewer%40hazel-freehold-344516.iam.gserviceaccount.com"
}

with open('google_key.json', 'w') as outfile:
    json.dump(google_key, outfile)

creds = gspread.service_account(filename='google_key.json')

sh = creds.open("trade_dashb")
worksheet = sh.get_worksheet(0)

worksheet2 = sh.get_worksheet(1)

# that is for log of last time active signal
all_combs = list(set(itertools.product(*[tickers, timeframes, patterns])))

while 1:
  try:
    dashboard,dashboard_timer = get_signals(dashboard)
    [ update_d(dashboard, {tc:{tf:{pt:''}}})  \
    for tc,tf,pt in all_combs
    if (datetime.datetime.now() - dashboard_timer[tc][tf][pt]).total_seconds()/60 > timeframe_coverter[tf] ] ;

    dashboard_df = pd.DataFrame.from_dict(dashboard,orient='index')

    dashboard_df = pd.DataFrame.from_dict({(i,j): dashboard_df[i][j] 
                                for i in dashboard_df.keys() 
                                for j in dashboard_df[i].keys()},
                            orient='index')
    
    dashboard_df.loc[:,"score_up"]=dashboard_df[[x for x in patterns if "up" in x]].replace('',0).sum(axis=1)
    dashboard_df.loc[:,"score_down"]=dashboard_df[[x for x in patterns if "dn" in x]].replace('',0).sum(axis=1)
    dashboard_df.loc[:,"score_gen"]=dashboard_df[patterns].replace('',0).sum(axis=1)

    df=dashboard_df.reset_index().rename(columns={"level_0":"frequency","level_1":"ticker_name"})
  # display(df)
    worksheet.update([df.columns.values.tolist()] + df.values.tolist())
    worksheet2.update([df.columns.values.tolist()] + df.sort_values(by='score_gen', ascending=False).values.tolist())
    # print(1)
    time.sleep(5)
  
  except:
    time.sleep(60)
    continue

